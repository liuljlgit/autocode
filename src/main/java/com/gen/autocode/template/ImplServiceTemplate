package ${packageName};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.cloud.common.complexquery.QueryExample;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.*;
import org.springframework.util.CollectionUtils;
import org.springframework.cache.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.redis.core.RedisTemplate;
import java.util.stream.Collectors;
${importList}

/**
 * I${entityName}Service service接口类
 * @author lijun
 */
@Service("${implServiceName}")
public class ${entityName}Service implements ${inftServiceName}{

    private static final Logger logger = LoggerFactory.getLogger(${entityName}Service.class);

    @Autowired
    private ${inftDaoName} ${implDaoName};
    @Autowired
    private I${entityName}Redis ${entityObj}Redis;

    /**
     * 根据主键获取对象
     * @return
     * @throws Exception
     */
    @Override
    public ${entityName} load${entityName}ByKey(${entityIdType} ${entityId}) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new Exception("请输入要获取的数据的ID");
        }
        ${entityName} ${entityObj};
        ${entityObj} = ${entityObj}Redis.get${entityName}ByKey(daId);
        if(Objects.nonNull(${entityObj})){
            logger.info("===> fetch ${entityId} = "+${entityId}+" entity from redis");
            return ${entityObj};
        }
        logger.info("===> fetch ${entityId} = "+${entityId}+" entity from database");
        ${entityObj} = ${entityObj}Dao.load${entityName}ByKey(daId);
        ${entityObj}Redis.set${entityName}2Redis(${entityObj},0L);
        return ${entityObj};
    }

    /**
     * 插入新对象
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer insert${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            throw new Exception("插入对象不能为空");
        }
        Integer result =  ${implDaoName}.insert${entityName}(${entityObj});
        dailyAmountRedis.clearAllDailyAmount();
        return result;
    }

    /**
     * 批量插入对象
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void insert${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            throw new Exception("插入对象不能为空");
        }
        ${implDaoName}.insert${entityName}List(${entityObj}List);
        dailyAmountRedis.clearAllDailyAmount();
    }

    /**
     * 更新对象
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer update${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            throw new Exception("更新对象不能为空");
        }
        Integer result = ${implDaoName}.update${entityName}(${entityObj});
        dailyAmountRedis.clearAllDailyAmount();
        return result;
    }

    /**
     * 批量更新
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            throw new Exception("更新对象不能为空");
        }
        ${implDaoName}.update${entityName}List(${entityObj}List);
        dailyAmountRedis.clearAllDailyAmount();
    }

    /**
     * 根据key删除对象
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer delete${entityName}ByKey(${entityIdType} ${entityId}) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new Exception("请输入要删除的数据的ID");
        }
        Integer result = ${implDaoName}.delete${entityName}ByKey(${entityId});
        dailyAmountRedis.clearAllDailyAmount();
        return result;
    }

    /**
     * 批量删除对象
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            throw new Exception("请输入要删除的数据的ID列表");
        }
        ${implDaoName}.delete${entityName}List(${entityObj}List);
        dailyAmountRedis.clearAllDailyAmount();
    }

    /**
     * 查询总数
     */
    @Override
    public Long get${entityName}Count(${entityName} ${entityObj}) throws Exception{
        if(Objects.isNull(${entityObj})){
            throw new Exception("请求参数不能为空");
        }
        return ${implDaoName}.get${entityName}Count(${entityObj});
    }

    /**
     * 列表
     */
    @Override
    public List<${entityName}> get${entityName}List(${entityName} ${entityObj}) throws Exception{
        if(Objects.isNull(${entityObj})){
            throw new Exception("请求参数不能为空");
        }
        return ${implDaoName}.get${entityName}List(${entityObj});
    }

    /**
     * 复杂查询查询总数
     */
    @Override
    public List<${entityName}> get${entityName}CountByExample(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            throw new Exception("请求参数不能为空");
        }
        QueryExample queryExample = new QueryExample();
        return ${entityObj}Dao.get${entityName}CountByExample(queryExample);
    }

    /**
     * 复杂查询获取列表
     */
    @Override
    public List<${entityName}> get${entityName}ListByExample(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            throw new Exception("请求参数不能为空");
        }
        QueryExample queryExample = new QueryExample();
        return ${entityObj}Dao.get${entityName}ListByExample(queryExample);
    }

    /**
     * 保存记录
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
           throw new Exception("请求参数不能为空");
        }
        if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
            ${entityObj}.set${upperFirstEntityId}(${entityObj}Redis.get${entityName}Id());
            insert${entityName}(${entityObj});
        }else{
            update${entityName}(${entityObj});
        }
    }

    /**
     * 保存列表
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        List<${entityName}> insertList = ${entityObj}List.stream().filter(e -> Objects.isNull(e.get${upperFirstEntityId}())).collect(Collectors.toList());
        List<${entityName}> updateList = ${entityObj}List.stream().filter(e -> !Objects.isNull(e.get${upperFirstEntityId}())).collect(Collectors.toList());
        if(!CollectionUtils.isEmpty(insertList)){
            insertList = insertList.stream().map(e->{
                e.set${upperFirstEntityId}(${entityObj}Redis.get${entityName}Id());
                return e;
            }).collect(Collectors.toList());
            insert${entityName}List(insertList);
        }
        if(!CollectionUtils.isEmpty(updateList)){
            update${entityName}List(updateList);
        }
    }
}
