package ${servicePackageOutPath}.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.cloud.common.complexquery.QueryExample;
import com.cloud.common.exception.BusiException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.*;
import org.springframework.util.CollectionUtils;
import com.cloud.common.constant.IConst;
import org.springframework.cache.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.redis.core.RedisTemplate;
import java.util.stream.Collectors;
import com.alibaba.fastjson.JSONObject;
import com.cloud.common.utils.HashUtil;
import ${inftServiceFullPath};
import ${inftDaoFullPath};
import ${entityFullPath};

/**
 * I${entityName}Service service接口类
 * @author lijun
 */
@Service("${implServiceName}")
public class ${entityName}ServiceImpl implements ${inftServiceName}{

    private static final Logger logger = LoggerFactory.getLogger(${entityName}ServiceImpl.class);

    @Autowired
    private ${inftDaoName} ${implDaoName};

    /**
     * 根据主键获取对象
     * @param ${entityId}
     * @return
     * @throws Exception
     */
    @Override
    public ${entityName} load${entityName}ByKey(${entityIdType} ${entityId},Long key) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new Exception("请输入要获取的数据的ID");
        }
        String tableName = HashUtil.hashTableName("${tablename}", 5, key);
        ${entityName} ${entityObj} = ${entityObj}Dao.load${entityName}ByKey(${entityId},tableName);
        if(Objects.isNull(${entityObj})){
            throw new Exception("没有符合条件的记录！") ;
        }
        return ${entityObj};
    }

    /**
     * 新增对象
     * @param ${entityObj}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer insert${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            throw new Exception("插入对象不能为空");
        }
        if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
            ${entityObj}.set${upperFirstEntityId}(UUID.randomUUID().toString().replace("-",""));
        }
        if(Objects.isNull(${entityObj}.getTname())){
            ${entityObj}.setTname(HashUtil.hashTableName("medium_contract", 5, null));
        }
        return ${implDaoName}.insert${entityName}(${entityObj});
    }

    /**
     * 批量新增对象
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void insert${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            throw new Exception("插入对象不能为空");
        }
        //设置表名称
        for (${entityName} e : ${entityObj}List) {
            if(Objects.isNull(e.get${upperFirstEntityId}())){
                e.set${upperFirstEntityId}(UUID.randomUUID().toString().replace("-",""));
            }
            if(Objects.isNull(e.getTname())){
                e.setTname(HashUtil.hashTableName("${tablename}", 5, null));
            }
        }
        //表名分组
        Map<String, List<${entityName}>> ${entityObj}Map = ${entityObj}List.stream().collect(Collectors.groupingBy(e -> e.getTname()));
        for (Map.Entry<String, List<${entityName}>> e : ${entityObj}Map.entrySet()) {
            String tablename = e.getKey();
            List<${entityName}> list = e.getValue();
            ${entityObj}Dao.insert${entityName}List(list,tablename);
        }
    }

    /**
     * 更新对象
     * @param ${entityObj}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer update${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            throw new Exception("更新对象不能为空");
        }

        if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
            throw new BusiException("更新主键不能为空");
        }
        if(Objects.isNull(${entityObj}.getTname())){
            ${entityObj}.setTname(HashUtil.hashTableName("medium_contract", 5, null));
        }
        return ${implDaoName}.update${entityName}(${entityObj});
    }

    /**
     * 批量更新
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            throw new Exception("更新对象不能为空");
        }
        //设置表名称
        for (${entityName} e : ${entityObj}List) {
            if(Objects.isNull(e.get${upperFirstEntityId}())){
                throw new BusiException("更新主键不能为空");
            }
            if(Objects.isNull(e.getTname())){
                e.setTname(HashUtil.hashTableName("medium_contract", 5, null));
            }
        }
        ${implDaoName}.update${entityName}List(${entityObj}List);
    }

    /**
     * 删除对象
     * @param ${entityId}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer delete${entityName}ByKey(${entityIdType} ${entityId},Long key) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new Exception("请输入要删除的数据的ID");
        }
        String tableName = HashUtil.hashTableName("${tablename}", 5, key);
        return ${implDaoName}.delete${entityName}ByKey(${entityId},tableName);
    }

    /**
     * 批量删除对象
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            throw new Exception("请输入要删除的数据的ID列表");
        }
        //设置表名称
        for (${entityName} e : ${entityObj}List) {
            if(Objects.isNull(e.getTname())){
                e.setTname(HashUtil.hashTableName("${tablename}", 5, null));
            }
        }
        //表名分组
        Map<String, List<${entityName}>> ${entityObj}Map = ${entityObj}List.stream().collect(Collectors.groupingBy(e -> e.getTname()));
        for (Map.Entry<String, List<${entityName}>> e : ${entityObj}Map.entrySet()) {
            String tablename = e.getKey();
            List<${entityName}> list = e.getValue();
            ${entityObj}Dao.delete${entityName}List(list,tablename);
        }
    }

    /**
     * 保存记录
     * @param ${entityObj}
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
           throw new Exception("请求参数不能为空");
        }
        if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
            ${entityObj}.set${upperFirstEntityId}(UUID.randomUUID().toString().replace("-",""));
            insert${entityName}(${entityObj});
        }else{
            update${entityName}(${entityObj});
        }
    }

    /**
     * 批量保存记录
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        List<${entityName}> insertList = ${entityObj}List.stream().filter(e -> Objects.isNull(e.get${upperFirstEntityId}())).collect(Collectors.toList());
        List<${entityName}> updateList = ${entityObj}List.stream().filter(e -> !Objects.isNull(e.get${upperFirstEntityId}())).collect(Collectors.toList());
        if(!CollectionUtils.isEmpty(insertList)){
            insertList = insertList.stream().map(e->{
                e.set${upperFirstEntityId}(UUID.randomUUID().toString().replace("-",""));
                return e;
            }).collect(Collectors.toList());
            insert${entityName}List(insertList);
        }
        if(!CollectionUtils.isEmpty(updateList)){
            update${entityName}List(updateList);
        }
    }

}
