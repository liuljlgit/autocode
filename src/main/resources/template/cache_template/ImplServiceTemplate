package ${servicePackageOutPath}.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.cloud.common.complexquery.QueryExample;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.*;
import org.springframework.util.CollectionUtils;
import com.cloud.common.constant.IConst;
import org.springframework.cache.annotation.*;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.redis.core.RedisTemplate;
import java.util.stream.Collectors;
import com.alibaba.fastjson.JSONObject;
import ${inftServiceFullPath};
import ${inftDaoFullPath};
import ${entityFullPath};
import ${inftRedisFullPath};

/**
 * I${entityName}Service service接口类
 * @author lijun
 */
@Service("${implServiceName}")
public class ${entityName}ServiceImpl implements ${inftServiceName}{

    private static final Logger logger = LoggerFactory.getLogger(${entityName}ServiceImpl.class);

    @Autowired
    private ${inftDaoName} ${implDaoName};
    @Autowired
    private I${entityName}Redis ${entityObj}Redis;

    /**
     * 根据主键获取对象
     * @param ${entityId}
     * @return
     * @throws Exception
     */
    @Override
    public ${entityName} load${entityName}ByKey(${entityIdType} ${entityId}) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new Exception("请输入要获取的数据的ID");
        }
        ${entityName} ${entityObj};
        ${entityObj} = ${entityObj}Redis.get${entityName}ByKey(${entityId});
        if(Objects.nonNull(${entityObj})){
            logger.info("===> fetch ${entityId} = "+${entityId}+" entity from redis");
            return ${entityObj};
        }
        logger.info("===> fetch ${entityId} = "+${entityId}+" entity from database");
        ${entityObj} = ${entityObj}Dao.load${entityName}ByKey(${entityId});
        if(Objects.isNull(${entityObj})){
            throw new Exception("没有符合条件的记录！") ;
        }
        ${entityObj}Redis.set${entityName}2Redis(${entityObj},0L);
        return ${entityObj};
    }

    /**
     * 普通查询获取单个结果
     * @param ${entityObj}
     * @param useCache
     * @return
     * @throws Exception
     */
    @Override
    public ${entityName} loadSingle${entityName}(${entityName} ${entityObj}, Boolean useCache) throws Exception {
        List<${entityName}> list = find${entityName}List(${entityObj}, useCache);
        if(!CollectionUtils.isEmpty(list)){
            return list.get(0);
        }
        return null;
    }

    /**
     * 复杂查询获取单个结果
     * @param queryExample
     * @param useCache
     * @return
     * @throws Exception
     */
    @Override
    public ${entityName} loadSingle${entityName}Example(QueryExample queryExample, Boolean useCache) throws Exception {
        List<${entityName}> list = find${entityName}ListExample(queryExample, useCache);
        if(!CollectionUtils.isEmpty(list)){
            return list.get(0);
        }
        return null;
    }

    /**
     * 新增对象
     * @param ${entityObj}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer insert${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            return 0;
        }
        if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
            ${entityObj}.set${upperFirstEntityId}(${entityObj}Redis.get${entityName}Id());
        }
        Integer result =  ${implDaoName}.insert${entityName}(${entityObj});
        ${entityObj}Redis.clearAll${entityName}();
        return result;
    }

    /**
     * 批量新增对象
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void insert${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        for (${entityName} ${entityObj} : ${entityObj}List) {
            if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
                ${entityObj}.set${upperFirstEntityId}(${entityObj}Redis.get${entityName}Id());
            }
        }
        ${implDaoName}.insert${entityName}List(${entityObj}List);
        ${entityObj}Redis.clearAll${entityName}();
    }

    /**
     * 更新对象
     * @param ${entityObj}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer update${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            return 0;
        }
        if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
            throw new Exception("更新主键不能为空");
        }
        Integer result = ${implDaoName}.update${entityName}(${entityObj});
        ${entityObj}Redis.clearAll${entityName}();
        return result;
    }

    /**
     * 批量更新
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        for (${entityName} ${entityObj} : ${entityObj}List) {
            if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
                throw new Exception("更新主键不能为空");
            }
        }
        ${implDaoName}.update${entityName}List(${entityObj}List);
        ${entityObj}Redis.clearAll${entityName}();
    }

    /**
     * 删除对象
     * @param ${entityId}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer delete${entityName}ByKey(${entityIdType} ${entityId}) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new Exception("请输入要删除的数据的ID");
        }
        Integer result = ${implDaoName}.delete${entityName}ByKey(${entityId});
        ${entityObj}Redis.clearAll${entityName}();
        return result;
    }

    /**
     * 批量删除对象
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        for (${entityName} ${entityObj} : ${entityObj}List) {
            if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
                throw new Exception("删除主键不能为空");
            }
        }
        ${implDaoName}.delete${entityName}List(${entityObj}List);
        ${entityObj}Redis.clearAll${entityName}();
    }

    /**
     * 查询记录总数
     * @param ${entityObj}
     * @param useCache
     * @return
     * @throws Exception
     */
    @Override
    public Long get${entityName}Count(${entityName} ${entityObj},Boolean useCache) throws Exception{
        if(Objects.isNull(${entityObj})){
            throw new Exception("请求参数不能为空");
        }
        Long count;
        if(useCache){
            count = ${entityObj}Redis.get${entityName}CountFromRedis(${entityObj});
            if(Objects.nonNull(count)){
                logger.info("===> fetch count = "+count+" entity from redis");
                return count;
            }
            logger.info("===> fetch count value from database");
            count = ${entityObj}Dao.get${entityName}Count(${entityObj});
            ${entityObj}Redis.set${entityName}Count2Redis(${entityObj},count,0L);
        }else{
            count = ${entityObj}Dao.get${entityName}Count(${entityObj});
        }
        return count;
    }

    /**
     * 分页查询列表
     * @param ${entityObj}
     * @param useCache
     * @return
     * @throws Exception
     */
    @Override
    public JSONObject get${entityName}ListByPage(${entityName} ${entityObj},Boolean useCache) throws Exception{
        if(Objects.isNull(${entityObj})){
            throw new Exception("请求参数不能为空");
        }
        if(Objects.isNull(${entityObj}.getPage()) || Objects.isNull(${entityObj}.getPageSize()) || IConst.PAGE_NO_USE.equals(${entityObj}.getPage())){
            throw new Exception("分页请求入参异常");
        }
        JSONObject resp = new JSONObject();
        ${entityObj}.setTotal(get${entityName}Count(${entityObj}, useCache).intValue());
        resp.put("total",${entityObj}.getTotal());
        resp.put("totalPage",${entityObj}.getTotalPage());
        resp.put("list",find${entityName}List(${entityObj}, useCache));
        return resp;
    }

    /**
     * 查询列表
     * @param ${entityObj}
     * @param useCache
     * @return
     * @throws Exception
     */
    @Override
    public List<${entityName}> find${entityName}List(${entityName} ${entityObj}, Boolean useCache) throws Exception{
        List<${entityName}> list;
        if(useCache){
            list = ${entityObj}Redis.get${entityName}ListFromRedis(${entityObj});
            if(Objects.nonNull(list)){
                logger.info("===> fetch page list from redis");
                return list;
            }
            logger.info("===> fetch page list from database");
            list = ${entityObj}Dao.get${entityName}List(${entityObj});
            ${entityObj}Redis.set${entityName}List2Redis(${entityObj},new ArrayList<>(list),IConst.DEFAULT_EXPIRE_TIME);
            return list;
        }else{
            logger.info("===> fetch page list from database");
            list = ${entityObj}Dao.get${entityName}List(${entityObj});
            return list;
        }
    }

    /**
     * 查询总记录数 Example
     * @param queryExample
     * @param useCache
     * @return
     * @throws Exception
     */
    @Override
    public Long get${entityName}CountExample(QueryExample queryExample,Boolean useCache) throws Exception {
        if(Objects.isNull(queryExample)){
            throw new Exception("请求参数不能为空");
        }
        Long count;
        if(useCache){
            count = ${entityObj}Redis.get${entityName}ExampleCountFromRedis(queryExample);
            if(Objects.nonNull(count)){
                logger.info("===> fetch count = "+count+" entity from redis");
                return count;
            }
            logger.info("===> fetch count value from database");
            count = ${entityObj}Dao.get${entityName}CountExample(queryExample);
            ${entityObj}Redis.set${entityName}ExampleCount2Redis(queryExample,count,0L);
        }else{
            count = ${entityObj}Dao.get${entityName}CountExample(queryExample);
        }
        return count;
    }

    /**
     * 分页查询列表 Example
     * @param queryExample
     * @param useCache
     * @return
     * @throws Exception
     */
    @Override
    public JSONObject get${entityName}ListExampleByPage(QueryExample queryExample,Boolean useCache) throws Exception {
        if(Objects.isNull(queryExample)){
            throw new Exception("请求参数不能为空");
        }
        if(Objects.isNull(queryExample.getPage()) || Objects.isNull(queryExample.getPageSize()) || IConst.PAGE_NO_USE.equals(queryExample.getPage())){
            throw new Exception("分页请求入参异常");
        }
        JSONObject resp = new JSONObject();
        queryExample.setTotal(get${entityName}CountExample(queryExample, useCache).intValue());
        resp.put("total",queryExample.getTotal());
        resp.put("totalPage",queryExample.getTotalPage());
        resp.put("list",find${entityName}ListExample(queryExample,useCache));
        return resp;
    }

    /**
     * 获取列表 Example
     * @param queryExample
     * @param useCache
     * @return
     */
    @Override
    public List<${entityName}>  find${entityName}ListExample(QueryExample queryExample, Boolean useCache) {
        List<${entityName}> list;
        if(useCache){
            list = ${entityObj}Redis.get${entityName}ExampleListFromRedis(queryExample);
            if(Objects.nonNull(list)){
                logger.info("===> fetch page list from redis");
                return list;
            }
            logger.info("===> fetch page list from database");
            list = ${entityObj}Dao.get${entityName}ListExample(queryExample);
            ${entityObj}Redis.set${entityName}ExampleList2Redis(queryExample,new ArrayList<>(list),IConst.DEFAULT_EXPIRE_TIME);
            return list;
        }else{
            logger.info("===> fetch page list from database");
            list = ${entityObj}Dao.get${entityName}ListExample(queryExample);
            return list;
        }
    }

    /**
     * 保存记录
     * @param ${entityObj}
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
           return ;
        }
        if(Objects.isNull(${entityObj}.get${upperFirstEntityId}())){
            ${entityObj}.set${upperFirstEntityId}(${entityObj}Redis.get${entityName}Id());
            insert${entityName}(${entityObj});
        }else{
            update${entityName}(${entityObj});
        }
    }

    /**
     * 批量保存记录
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        List<${entityName}> insertList = ${entityObj}List.stream().filter(e -> Objects.isNull(e.get${upperFirstEntityId}())).collect(Collectors.toList());
        List<${entityName}> updateList = ${entityObj}List.stream().filter(e -> !Objects.isNull(e.get${upperFirstEntityId}())).collect(Collectors.toList());
        if(!CollectionUtils.isEmpty(insertList)){
            insertList = insertList.stream().map(e->{
                e.set${upperFirstEntityId}(${entityObj}Redis.get${entityName}Id());
                return e;
            }).collect(Collectors.toList());
            insert${entityName}List(insertList);
        }
        if(!CollectionUtils.isEmpty(updateList)){
            update${entityName}List(updateList);
        }
    }
}
