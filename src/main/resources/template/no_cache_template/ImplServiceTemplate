package ${servicePackageOutPath}.impl;

import com.alibaba.fastjson.JSONObject;
import com.cloud.common.complexquery.QueryExample;
import com.cloud.common.constant.IConst;
import com.cloud.common.exception.BusiException;
import com.cloud.common.utils.IDUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.CollectionUtils;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import ${inftServiceFullPath};
import ${inftDaoFullPath};
import ${entityFullPath};
import ${inftRedisFullPath};
import ${respFullPath};

/**
 * I${entityName}Service service接口类
 * @author lijun
 */
@Service("${implServiceName}")
public class ${entityName}ServiceImpl implements ${inftServiceName}{

    private static final Logger logger = LoggerFactory.getLogger(${entityName}ServiceImpl.class);

    @Autowired
    private I${entityName}Dao ${entityObj}Dao;

    /**
     * 根据主键获取对象
     * @param ${entityId}
     * @return
     * @throws Exception
     */
    @Override
    public ${entityName} load${entityName}ByKey(${entityIdType} ${entityId}) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new BusiException("请输入要获取的数据的ID");
        }
        ${entityName} ${entityObj} = ${entityObj}Dao.load${entityName}ByKey(${entityId});
        if(Objects.isNull(${entityObj})){
            throw new BusiException("没有符合条件的记录！") ;
        }
        return ${entityObj};
    }

    /**
     * 普通查询获取单个结果
     * @param t
     * @return
     * @throws Exception
     */
    @Override
    public <T> ${entityName} selectOne${entityName}(T t) throws Exception {
        List<${entityName}> list = find${entityName}List(t);
        if(!CollectionUtils.isEmpty(list)){
            return list.get(0);
        }
        return null;
    }

    /**
     * 新增对象
     * @param ${entityObj}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer add${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
            return 0;
        }
        if(Objects.isNull(${entityObj}.${getEntityId}())){
            ${entityObj}.${setEntityId}(${noCacheGenId});
        }
        return ${entityObj}Dao.add${entityName}(${entityObj});
    }

    /**
     * 批量新增对象
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void add${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        for (${entityName} ${entityObj} : ${entityObj}List) {
            if(Objects.isNull(${entityObj}.${getEntityId}())){
                ${entityObj}.${setEntityId}(${noCacheGenId});
            }
        }
        ${entityObj}Dao.add${entityName}List(${entityObj}List);
    }

    /**
     * 更新对象
     * @param ${entityObj}
     * @param isFullUpdate
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer update${entityName}(${entityName} ${entityObj},Boolean isFullUpdate) throws Exception {
        if(Objects.isNull(${entityObj})){
            return 0;
        }
        if(Objects.isNull(${entityObj}.${getEntityId}())){
            throw new BusiException("更新主键不能为空");
        }
        Integer result;
        if(isFullUpdate){
            result = ${entityObj}Dao.fullUpdate${entityName}(${entityObj});
        } else {
            result = ${entityObj}Dao.update${entityName}(${entityObj});
        }
        return result;
    }

    /**
     * 批量更新
     * @param list
     * @param isFullUpdate
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update${entityName}List(List<${entityName}> list,Boolean isFullUpdate) throws Exception {
        if(CollectionUtils.isEmpty(list)){
            return ;
        }
        for (${entityName} ${entityObj} : list) {
            if(Objects.isNull(${entityObj}.${getEntityId}())){
                throw new BusiException("更新主键不能为空");
            }
        }
        if(isFullUpdate){
            ${entityObj}Dao.fullUpdate${entityName}List(list);
        } else {
            ${entityObj}Dao.update${entityName}List(list);
        }
    }

    /**
     * 删除对象
     * @param ${entityId}
     * @return
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public Integer delete${entityName}ById(${entityIdType} ${entityId}) throws Exception {
        if(Objects.isNull(${entityId})){
            throw new BusiException("请输入要删除的数据的ID");
        }
        return ${entityObj}Dao.delete${entityName}ById(${entityId});
    }

    /**
     * 批量删除对象
     * @param ids
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void delete${entityName}ByIds(List<${entityIdType}> ids) throws Exception {
        if(CollectionUtils.isEmpty(ids)){
            return ;
        }
        ${entityObj}Dao.delete${entityName}ByIds(ids);
    }

    /**
     * 查询记录总数
     * @param t
     * @param <T>
     * @return
     * @throws Exception
     */
    public <T> Long getTotal${entityName}(T t) throws Exception {
        if(Objects.isNull(t)){
           throw new BusiException("查询参数不能为空");
        }
        if(t instanceof ${entityName}){
            return ${entityObj}Dao.get${entityName}Count((${entityName}) t);
        }else if(t instanceof QueryExample){
            return ${entityObj}Dao.get${entityName}CountExample((QueryExample) t);
        }else{
            throw new BusiException("选择类型不正确");
        }
    }

    /**
     * 查询列表
     * @param t
     * @param <T>
     * @return
     * @throws Exception
     */
    public <T> List<${entityName}> find${entityName}List(T t) throws Exception {
        if(Objects.isNull(t)){
           throw new BusiException("查询参数不能为空");
        }
        if(t instanceof ${entityName}){
            return ${entityObj}Dao.get${entityName}List((${entityName}) t);
        }else if(t instanceof QueryExample){
            return ${entityObj}Dao.get${entityName}ListExample((QueryExample) t);
        }else{
            throw new BusiException("选择类型不正确");
        }
    }

    /**
     * 根据ID列表从数据库中查询列表
     * @param list
     * @return
     * @throws Exception
     */
    @Override
    public List<${entityName}> find${entityName}ListByIds(List<${entityIdType}> list) throws Exception {
        if(CollectionUtils.isEmpty(list)){
            return Collections.EMPTY_LIST;
        }
        return ${entityObj}Dao.find${entityName}ListByIds(list);
    }

    /**
     * 分页查询列表
     * @param ${entityObj}
     * @return
     * @throws Exception
     */
    @Override
    public JSONObject getPage${entityName}(${entityName} ${entityObj}) throws Exception{
        if(Objects.isNull(${entityObj})){
            throw new BusiException("查询参数不能为空");
        }
        if(Objects.isNull(${entityObj}.getPage()) || Objects.isNull(${entityObj}.getPageSize()) || IConst.PAGE_NO_USE.equals(${entityObj}.getPage())){
            throw new BusiException("分页请求入参异常");
        }
        JSONObject resp = new JSONObject();
        ${entityObj}.setTotal(getTotal${entityName}(${entityObj}).intValue());
        resp.put("total",${entityObj}.getTotal());
        resp.put("totalPage",${entityObj}.getTotalPage());
        resp.put("list",find${entityName}List(${entityObj}).stream().map(e-> new ${entityName}Resp(e)).collect(Collectors.toList()));
        return resp;
    }

    /**
     * 分页查询列表 Example
     * @param queryExample
     * @return
     * @throws Exception
     */
    @Override
    public JSONObject getPage${entityName}Example(QueryExample queryExample) throws Exception {
        if(Objects.isNull(queryExample)){
            throw new BusiException("查询参数不能为空");
        }
        if(Objects.isNull(queryExample.getPage()) || Objects.isNull(queryExample.getPageSize()) || IConst.PAGE_NO_USE.equals(queryExample.getPage())){
            throw new BusiException("分页请求入参异常");
        }
        JSONObject resp = new JSONObject();
        queryExample.setTotal(getTotal${entityName}(queryExample).intValue());
        resp.put("totalPage",queryExample.getTotalPage());
        resp.put("total",queryExample.getTotal());
        resp.put("list",find${entityName}List(queryExample).stream().map(e-> new ${entityName}Resp(e)).collect(Collectors.toList()));
        return resp;
    }

    /**
     * 保存记录
     * @param ${entityObj}
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}(${entityName} ${entityObj}) throws Exception {
        if(Objects.isNull(${entityObj})){
           return ;
        }
        if(Objects.isNull(${entityObj}.${getEntityId}())){
            ${entityObj}.${setEntityId}(${noCacheGenId});
            add${entityName}(${entityObj});
        }else{
            update${entityName}(${entityObj},false);
        }
    }

    /**
     * 批量保存记录
     * @param ${entityObj}List
     * @throws Exception
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public void save${entityName}List(List<${entityName}> ${entityObj}List) throws Exception {
        if(CollectionUtils.isEmpty(${entityObj}List)){
            return ;
        }
        List<${entityName}> addList = ${entityObj}List.stream().filter(e -> Objects.isNull(e.${getEntityId}())).collect(Collectors.toList());
        List<${entityName}> updateList = ${entityObj}List.stream().filter(e -> !Objects.isNull(e.${getEntityId}())).collect(Collectors.toList());
        if(!CollectionUtils.isEmpty(addList)){
            addList = addList.stream().map(e->{
                e.${setEntityId}(${noCacheGenId});
                return e;
            }).collect(Collectors.toList());
            add${entityName}List(addList);
        }
        if(!CollectionUtils.isEmpty(updateList)){
            update${entityName}List(updateList,false);
        }
    }
}
